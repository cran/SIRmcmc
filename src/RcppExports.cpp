// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// likelihood
double likelihood(NumericVector onset, NumericVector cut, NumericMatrix table, double alpha, double beta, double gamma, NumericVector epsilon, int index, int esteps);
RcppExport SEXP _SIRmcmc_likelihood(SEXP onsetSEXP, SEXP cutSEXP, SEXP tableSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP epsilonSEXP, SEXP indexSEXP, SEXP estepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type table(tableSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type esteps(estepsSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(onset, cut, table, alpha, beta, gamma, epsilon, index, esteps));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihood
double logLikelihood(NumericVector onset, List cut, NumericVector hh, NumericMatrix table, double alpha, double beta, double gamma, NumericVector epsilon, int followup, int index, int esteps);
RcppExport SEXP _SIRmcmc_logLikelihood(SEXP onsetSEXP, SEXP cutSEXP, SEXP hhSEXP, SEXP tableSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP epsilonSEXP, SEXP followupSEXP, SEXP indexSEXP, SEXP estepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< List >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hh(hhSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type table(tableSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type followup(followupSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type esteps(estepsSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihood(onset, cut, hh, table, alpha, beta, gamma, epsilon, followup, index, esteps));
    return rcpp_result_gen;
END_RCPP
}
// unifprior
double unifprior(double alpha, double beta, double gamma, NumericVector epsilon, int esteps, double UB, double LB);
RcppExport SEXP _SIRmcmc_unifprior(SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP epsilonSEXP, SEXP estepsSEXP, SEXP UBSEXP, SEXP LBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type esteps(estepsSEXP);
    Rcpp::traits::input_parameter< double >::type UB(UBSEXP);
    Rcpp::traits::input_parameter< double >::type LB(LBSEXP);
    rcpp_result_gen = Rcpp::wrap(unifprior(alpha, beta, gamma, epsilon, esteps, UB, LB));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SIRmcmc_likelihood", (DL_FUNC) &_SIRmcmc_likelihood, 9},
    {"_SIRmcmc_logLikelihood", (DL_FUNC) &_SIRmcmc_logLikelihood, 11},
    {"_SIRmcmc_unifprior", (DL_FUNC) &_SIRmcmc_unifprior, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_SIRmcmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
